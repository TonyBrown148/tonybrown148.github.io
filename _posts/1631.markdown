---
layout: post
title:  "题解 P1631 【序列合并】"
date:   2019-04-15 19:20:35
categories: 题解
author: TB148
image: https://i.loli.net/2019/04/15/5cb46a13e44fd.png
---
本篇题解不是严格的$O(nlogn)$，实际上，它是$O(nlog^2n)$的，但是，AC了

进入正题：

我一开始想用一个暴力先骗点分，于是，就想到了枚举所有和并把答案存在优先队列里，差不多这个样子（码风还好，不太需要解释）：

```
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<queue>
using namespace std;
priority_queue<int>q;
int n,a[100005],b[100005],ans[100005];
int main(){
    scanf("%d",&n);
    for(int i=1;i<=n;i++){
    	scanf("%d",&a[i]);
    }
    for(int i=1;i<=n;i++){
    	scanf("%d",&b[i]);
    }
    sort(a+1,a+n+1);
    sort(b+1,b+n+1);
    for(int i=1;i<=n;i++){
    	for(int j=1;j<=n;j++){
    		int x=a[i]+b[j];
    		if(q.size()<n){
    			q.push(x);
    		}
    		else{
    			if(q.top()>x){
    				q.pop();
    				q.push(x);
    			}
    		}
    	}
    }
    for(int i=n;i>=1;i--){
    	ans[i]=q.top();
    	q.pop();
    }
    for(int i=1;i<=n;i++){
    	printf("%d ",ans[i]);
    }
    return 0;
}
```

复杂度$O(n^2logn)$，60分

现在开始优化

仔细想想，若$a_i+b_j$没有放入优先队列，那$a_i+b_{j+1}$呢？

不会，因为$b_{j+1}>b_j$，所以$a_i+b_{j+1}>a_i+b_j>q.top$，无法放入

所以在$a_i+b_j$没有放入优先队列时，$a_i+b_{j+n}(n>0)$也都不会被放入，可以直接break一下跳到$a_{i+1}+b_1$继续枚举

于是：
```
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<queue>
using namespace std;
priority_queue<int>q;
int n,a[100005],b[100005],ans[100005];
int main(){
    scanf("%d",&n);
    for(int i=1;i<=n;i++){
    	scanf("%d",&a[i]);
    }
    for(int i=1;i<=n;i++){
    	scanf("%d",&b[i]);
    }
    sort(a+1,a+n+1);
    sort(b+1,b+n+1);
    for(int i=1;i<=n;i++){
    	for(int j=1;j<=n;j++){
    		int x=a[i]+b[j];
    		if(q.size()<n){
    			q.push(x);
    		}
    		else{
    			if(q.top()>x){
    				q.pop();
    				q.push(x);
    			}
    			else{
    				break;
    			}
    		}
    	}
    }
    for(int i=n;i>=1;i--){
    	ans[i]=q.top();
    	q.pop();
    }
    for(int i=1;i<=n;i++){
    	printf("%d ",ans[i]);
    }
    return 0;
}
```

这个代码AC了

时间复杂度吗，下面给出我的思路，证明不是太难：

第一行至多扫完它的$\dfrac{1}{1}$

第二行变为$\dfrac{1}{2}$

以此类推，第$i$行至多$\dfrac{1}{i}(1 \le i \le n)$

合在一起，共$\dfrac{1}{1}+\dfrac{1}{2}+\cdots+\dfrac{1}{n}$

欧拉证明过，上面的无穷级数的增长率为$O(lnn)$的

因此，总复杂度为$O(n\ logn\ lnn)$也就是$O(nlog^2n)$的，证毕
